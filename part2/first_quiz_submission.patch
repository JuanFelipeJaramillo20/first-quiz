diff --git a/part1/question1.py b/part1/question1.py
index 5c99fdb..ed431bd 100644
--- a/part1/question1.py
+++ b/part1/question1.py
@@ -20,6 +20,8 @@ def get_city_temperature(city):
       return 17
    if city == "San Francisco":
       return 16
+   if city == "New York":
+      return 14
 
 def get_city_weather(city):
 
@@ -29,6 +31,8 @@ def get_city_weather(city):
      sky_condition = "cloudy"
   elif city == "New York":
      sky_condition = "rainy"
+  elif city == "Quito":
+     sky_condition = "sunny"
 
   temperature = get_city_temperature(city)
 
diff --git a/part1/question2.py b/part1/question2.py
index 34a9b01..f3574ff 100644
--- a/part1/question2.py
+++ b/part1/question2.py
@@ -15,7 +15,10 @@
 # it. As always, there is a test suite that checks the result. It is in 
 # `question2_test.py.`
 
-swapper = None
+def swapper(item):
+    x, y = item
+    return (y, x)
+
 
 def run_swapper(list_of_tuples):
   return list(map(swapper, list_of_tuples))
\ No newline at end of file
diff --git a/part1/question3.py b/part1/question3.py
index 04fab99..db0310b 100644
--- a/part1/question3.py
+++ b/part1/question3.py
@@ -26,8 +26,35 @@
 # formulas and their outputs in the test file, `question3_test.py`.
 
 # This function should return an oven instance!
+
+class MagicalOven:
+    def __init__(self):
+        self.ingredients = []
+        self.output = None
+
+    def add(self, item):
+        self.ingredients.append(item)
+
+    def freeze(self):
+        self.output = "snow"
+
+    def boil(self):
+        if "lead" in self.ingredients and "mercury" in self.ingredients:
+            self.output = "gold"
+        else:
+            self.output = "unknown"
+
+    def wait(self):
+        if "cheese" in self.ingredients and "dough" in self.ingredients and "tomato" in self.ingredients:
+            self.output = "pizza"
+        else:
+            self.output = "unknown"
+
+    def get_output(self):
+        return self.output
+
 def make_oven():
-  None
+  return MagicalOven()
 
 def alchemy_combine(oven, ingredients, temperature):
   
@@ -36,7 +63,7 @@ def alchemy_combine(oven, ingredients, temperature):
 
   if temperature < 0:
     oven.freeze()
-  elif temperature >= 100:
+  elif temperature > 150:
     oven.boil()
   else:
     oven.wait()
diff --git a/part1/question3_test.py b/part1/question3_test.py
index 6cb6c89..c1018de 100644
--- a/part1/question3_test.py
+++ b/part1/question3_test.py
@@ -1,3 +1,5 @@
+from question3 import alchemy_combine, make_oven
+
 def test_alchemy_combine():
 
   assert alchemy_combine(
diff --git a/part1/question4.py b/part1/question4.py
index 1e1b2bf..dcfc7e1 100644
--- a/part1/question4.py
+++ b/part1/question4.py
@@ -22,9 +22,10 @@ import pets_db
 # Write SQL to select the pets that are owned by nobody.
 # The output should be a list of tuples in the format: (<pet name>, <species>, <age>)
 
-sql_pets_owned_by_nobody = """
 
-Your SQL here.
+sql_pets_owned_by_nobody = "SELECT name, species, age FROM animals WHERE animal_id NOT IN (SELECT pet_id FROM people_animals)"
+
+#Your SQL here.
 
 """
 
@@ -32,17 +33,14 @@ Your SQL here.
 # Write SQL to select how the number of pets are older than their owners. 
 # The output should be an integer.
 
-sql_pets_older_than_owner = """
 
-Your SQL here.
+#Your SQL here.
 
 """
+sql_pets_older_than_owner = "SELECT COUNT(*) FROM animals a JOIN people_animals pa ON a.animal_id = pa.pet_id JOIN people p ON pa.owner_id = p.person_id WHERE a.age > p.age"
 
 # Part 4.C: BONUS CHALLENGE! 
 # Write SQL to select the pets that are owned by Bessie and nobody else.
 # The output should be a list of tuples in the format: (<person name>, <pet name>, <species>)
-sql_only_owned_by_bessie = """ 
-
-Your SQL here.
-
-"""
\ No newline at end of file
+sql_only_owned_by_bessie = "SELECT p.name, a.name, a.species FROM people p JOIN people_animals pa ON pa.owner_id = p.person_id JOIN animals a ON pa.pet_id = a.animal_id WHERE p.name LIKE 'Bessie' AND a.animal_id NOT IN (SELECT animal_id FROM animals JOIN people_animals ON animal_id = pet_id WHERE owner_id NOT LIKE p.person_id)" 
+#Your SQL here.
diff --git a/part1/question5.py b/part1/question5.py
index f76654f..4890848 100644
--- a/part1/question5.py
+++ b/part1/question5.py
@@ -18,9 +18,7 @@
 # name text
 # vegetarian integer
 
-sql_create_favorite_foods = """
-
-Your SQL here.
+sql_create_favorite_foods = "CREATE TABLE favorite_foods (food_id integer, name text, vegetarian integer)"
 
 """
 
@@ -28,18 +26,14 @@ Your SQL here.
 # Alter the animals and people tables by adding a new column to each called 'favorite_food_id'
 # The test suite will verify the new changes by inserting some new rows. 
 
-sql_alter_tables_with_favorite_food = """
 
 Your SQL here.
 
 """
+sql_alter_tables_with_favorite_food = "ALTER TABLE people ADD favorite_food_id integer; ALTER TABLE animals ADD favorite_food_id integer"
 
 # Part 5.C:
 # Write a query to select all pets that are vegetarian.
 # THe output should be a list of tuples in the format: (<pet name>, <food name>)
 
-sql_select_all_vegetarian_pets = """
-
-Your SQL here.
-
-"""
\ No newline at end of file
+sql_select_all_vegetarian_pets = "SELECT a.name, ff.name FROM animals a JOIN favorite_foods ff ON a.favorite_food_id = ff.food_id WHERE vegetarian = 1"
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
index 85742c4..5632751 100644
--- a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
@@ -1,9 +1,55 @@
 package org.velezreyes.quiz.question6;
 
-public class VendingMachineImpl {
+public class VendingMachineImpl implements VendingMachine{
+
+  private int moneyInserted = 0;
 
   public static VendingMachine getInstance() {
-    // Fix me!
-    return null;
+    return new VendingMachineImpl();
+  }
+  @Override
+  public void insertQuarter() {
+    moneyInserted += 25;
+  }
+
+  @Override
+  public Drink pressButton(String name) throws NotEnoughMoneyException, UnknownDrinkException {
+    if (name.equals("ScottCola")) {
+      if (moneyInserted >= 75) {
+        moneyInserted -= 75;
+        return new DrinkImpl("ScottCola", true);
+      } else {
+        throw new NotEnoughMoneyException();
+      }
+    } else if (name.equals("KarenTea")) {
+      if (moneyInserted >= 100) {
+        moneyInserted -= 100;
+        return new DrinkImpl("KarenTea", false);
+      } else {
+        throw new NotEnoughMoneyException();
+      } 
+    } else {
+      throw new UnknownDrinkException();
+    }
+  }
+
+  private class DrinkImpl implements Drink {
+    private String name;
+    private boolean isFizzy;
+
+    public DrinkImpl(String name, boolean isFizzy) {
+      this.name = name;
+      this.isFizzy = isFizzy;
+    }
+
+    @Override
+    public String getName() {
+      return name;
+    }
+
+    @Override
+    public boolean isFizzy() {
+      return isFizzy;
+    }
   }
 }
